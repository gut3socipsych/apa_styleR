h1 + geom_histogram(binwidth = 5) + geom_density()
hist(airquality$Temp, breaks = 10)
h1 + geom_histogram(binwidth = 5)
h1 + geom_freqpoly(binwidth = 5)
h1 + geom_histogram(binwidth = 5) + geom_freqpoly(binwidth = 5)
h1 + geom_density()
s1 <- ggplot(data = airquality, aes(x = Temp, y = Ozone))
s1 + geom_point()
s1 + geom_line()
s1 + geom_path()
s1 + geom_point()
s1 + geom_point() + geom_line()
s1 + geom_point() + geom_path()
s1 + geom_point()
s1
s1 + geom_dotplot()
s1 + geom_point() + geom_abline()
s1 + geom_point() + geom_abline() + labs(xlab = "X", ylab = "Y")
s1 + geom_point() + geom_abline() + labs(x = "X", y = "Y")
s1 + geom_point() + geom_abline() + labs(x = "X", y = "Y", main = "PLOT")
s1 + geom_point() + geom_abline() + labs(x = "X", y = "Y", title = "PLOT")
mtcars
airquality
airquality %>%> head()
airquality %>% head()
library(dpylr)
library(dpylr)
library(dplyr)
airquality %>% head()
mean(airquality$Temp)
t.test(airquality$Temp, mu = 65)
set.seed(123)
a <- rnorm(n = 10000, mean = 60, sd = 1)
summary(a)
a1 <- sample(x = a, size = 50, replace = F)
a1
summary(a1)
a1 <- sample(x = a, size = 50, replace = F)
summary(a1)
a1 <- sample(x = a, size = 50, replace = F)
summary(a1)
a1 <- sample(x = a, size = 50, replace = F)
summary(a1)
a1 <- sample(x = a, size = 50, replace = F)
summary(a1)
a1 <- sample(x = a, size = 50, replace = F)
summary(a1)
a1 <- sample(x = a, size = 50, replace = F)
summary(a1)
t.test(x = a1, mu = mean(a))
t.test(airquality$Temp, mu = 65)
library(psych)
sd(a1)
d <- (means(a1)-mean(a))/sd(a1)
d <- (mean(a1)-mean(a))/sd(a1)
d
d <- abs((mean(a1)-mean(a))/sd(a1))
d
mean(a1)
sd(a1)
d
write.table(file = "clipboard", a)
View(a)
a <- as.data.frame(a)
View(a)
write.table(file = "clipboard", a)
write.csv(file = "test.csv", a)
write.csv(file = "test.csv", a1)
head(a1)
sd(a1)
t.test(x = a1, mu = mean(a))
t.test(x = a1, mu = mean(a$a))
sd(a1)
d <- abs((mean(a1)-mean(a))/sd(a1))
d <- abs((mean(a1)-mean(a$a))/sd(a1))
d
mean(a1)-mean(a$a)
sd(a1)
-.171295227/.8791954095
d
t.test(airquality$Temp, mu = 65)
sd(airquality$Temp)
abs((mean(airquality$Temp)-65))/sd(airquality$Temp)
library(qdap)
library(tm)
library(twitteR)
new_text <- "DataCamp is the first online learning platform that focuses on building the best learning experience specifically for Data Science. We have offices in Boston and Belgium and to date, we trained over 250,000 (aspiring) data scientists in over 150 countries. These data science enthusiasts completed more than 9 million exercises. You can take free beginner courses, or subscribe for $25/month to get access to all premium courses."
fr_terms <- freq_terms(new_text, 4)
fr_terms
plot(fr_terms)
consumer_key <- "cE3Uv6VPKpgN5pF6O3de7Qw9T"
consumer_secret <- "mIxXXcHOYXBWJH1C7WqLazbGFao8EvijCxkigLMvEL8CPM00Cz"
access_token <- "383238232-KTsymCEk918W6pnVhiKqnPt2em6iCYPIwCRyxnxo"
access_secret <- "uRkowsg0fv9OMSFSzcmSzrsD5JtREVLz1MMnPXEI8gZDT"
setup_twitter_oauth(consumer_key = consumer_key, consumer_secret = consumer_secret, access_token = access_token, access_secret = access_secret)
test_search <- twListToDF(searchTwitter(searchString = "Trump", n = 50, lang = "en"))
View(test_search)
test_search #other document
colnames(test_search) #other document
test_search$text[1]
strsplit(test_search[1])
strsplit(test_search[1], split = " ")
t <- test_search$text[1]
t
strsplit(t, split = " "
strsplit(t, split = " ")
strsplit(t, split = " ")
t <- test_search$text
t <- strsplit(t, split = " ")
t
t.test
test.t()
t.test()
set.seed(123)
a <- rnorm(n = 10000, mean = 60, sd = 1)
summary(a)
a1 <- sample(x = a, size = 50, replace = F)
summary(a1)
set.seed(123)
a1 <- sample(x = a, size = 50, replace = F)
summary(a1)
t.test(x = a1, mu = mean(a$a))
t.test(x = a1, mu = mean(a))
sd(a1)
d <- abs((mean(a1)-mean(a$a))/sd(a1))
d
d <- abs((mean(a1)-mean(a))/sd(a1))
d
set.seed(123)
a <- rnorm(n = 10000, mean = 60, sd = 1)
summary(a)
set.seed(123)
a1 <- sample(x = a, size = 50, replace = F)
summary(a1)
t.test(x = a1, mu = mean(a))
sd(a1)
d <- abs((mean(a1)-mean(a))/sd(a1))
d
t <- (mean(a1)-mean(a))/(sd(a1)/sqrt(length(a1)))
t
t.test(x = a1, mu = mean(a))
df <- length(a1)-1
df
t;df
dt()
dt(t, df)
t <- (mean(a1)-mean(a))/(sd(a1)/sqrt(length(a1)))
df <- length(a1)-1
p <- 2 * pt(t, df)
p
p <- 2 * pt(-abs(t), df)
p
t
abs(t)
-abs(t)
mean(a1)
mean(a)
pt(-abs(t), df)
pt
sd(a1)
sd(a1)
sd(a1)
a1
write.table(file = "test.csv", a1)
write.table(file = "test.csv", as.data.frame(a1))
a2 <- as.data.frame(a1)
a2
head(a2)
write.table(file = "test.csv", a2)
write.table(file = "test.csv", a2)
sd(a1)
t;df;p
mean(a)
t <- (mean(a1)-mean(a))/(sd(a1)/sqrt(length(a1)))
df <- length(a1)-1
p <- 2 * pt(-abs(t), df)
t;df;p
summary(a)
mean(a)
set.seed(123)
a <- rnorm(n = 10000, mean = 60, sd = 1)
summary(a)
set.seed(123)
a1 <- sample(x = a, size = 50, replace = F)
summary(a1)
t.test(x = a1, mu = mean(a))
sd(a1)
d <- abs((mean(a1)-mean(a))/sd(a1))
d
t <- (mean(a1)-mean(a))/(sd(a1)/sqrt(length(a1)))
df <- length(a1)-1
p <- 2 * pt(-abs(t), df)
t;df;p
d <- abs((mean(a1)-mean(a))/sd(a1))
set.seed(123)
a <- rnorm(n = 10000, mean = 60, sd = 1)
summary(a)
set.seed(123)
a1 <- sample(x = a, size = 50, replace = F)
summary(a1)
t.test(x = a1, mu = mean(a))
sd(a1)
d <- abs((mean(a1)-mean(a))/sd(a1))
d
t <- (mean(a1)-mean(a))/(sd(a1)/sqrt(length(a1)))
df <- length(a1)-1
p <- 2 * pt(-abs(t), df)
t;df;p
install.packages("compute.es")
library(compute.es)
test(t, df)
tes(t, df)
t;df;p
tes(t, 49)
tes(t, 49, NA)
tes(t, 49, NA)$d
tes(t, 49, 10000)
t;df;p
d
es <- tes(t, 49, 10000)
names(es)
names(es)$d
es$d
es$cl.d
es$d
t.test(x = a1, mu = mean(a))
tt <- t.test(x = a1, mu = mean(a))
tt
names(tt)
es
es
es <- tes(t, 49, 10000)
summary(es)
tes(t, 49, 10000)
install.packages("apaStyle")
install.packages("apaTables")
test_apa <- function(sample_data, mu){
test <- t.test(x = sample_data, mu = mu)
return(test)
}
test_apa(sample_data = a1, mu = mean(a))
o <- test_apa(sample_data = a1, mu = mean(a))
o
names(o)
o$statistic
word <- "charles"
paste("I am %word%")
"I and %word%"
"I and %word"
"I and %/word"
sprintf("I am %word")
sprintf("I am %s", word)
paste("I am", word, sep = " ")
sprintf("I am %word", word)
sprintf("I am %s and I like %s", word)
word <- "charles"
food <- "steak"
sprintf("I am %s and I like %s", word, food)
o
names(o)
test_apa <- function(sample_data, mu){
test <- t.test(x = sample_data, mu = mu)
intext_output <- sprintf("M = %s, SD = %s, t(%s) = %s",
mean(sample_data), sd(sample_data), length(sample_data)-1, test$statistic)
return(intext_output)
}
o <- test_apa(sample_data = a1, mu = mean(a))
o
test_apa <- function(sample_data, mu){
rounded_digits = 3
test <- t.test(x = sample_data, mu = mu)
intext_output <- sprintf("M = %s, SD = %s, t(%s) = %s, p = %s",
round(mean(sample_data), digits = rounded_digits),
round(sd(sample_data), digits = rounded_digits),
length(sample_data)-1,
round(test$statistic, digits = rounded_digits))
return(intext_output)
}
o <- test_apa(sample_data = a1, mu = mean(a))
names(tt)
test_apa <- function(sample_data, mu){
rounded_digits = 3
test <- t.test(x = sample_data, mu = mu)
intext_output <- sprintf("M = %s, SD = %s, t(%s) = %s, p = %s",
round(mean(sample_data), digits = rounded_digits),
round(sd(sample_data), digits = rounded_digits),
length(sample_data)-1,
round(test$statistic, digits = rounded_digits),
round(test$p.value, digits = rounded_digits))
return(intext_output)
}
o <- test_apa(sample_data = a1, mu = mean(a))
o
test_apa <- function(sample_data, mu){
rounded_digits = 3
test <- t.test(x = sample_data, mu = mu)
intext_output <- sprintf("M = %s, SD = %s, t(%s) = %s, p = %s, d = %s",
round(mean(sample_data), digits = rounded_digits),
round(sd(sample_data), digits = rounded_digits),
length(sample_data)-1,
round(test$statistic, digits = rounded_digits),
round(test$p.value, digits = rounded_digits),
round(abs((mean(sample_data)-mu)/sd(sample_data))))
return(intext_output)
}
o <- test_apa(sample_data = a1, mu = mean(a))
o
test_apa <- function(sample_data, mu){
rounded_digits = 3
test <- t.test(x = sample_data, mu = mu)
intext_output <- sprintf("M = %s, SD = %s, t(%s) = %s, p = %s, d = %s",
round(mean(sample_data), digits = rounded_digits),
round(sd(sample_data), digits = rounded_digits),
length(sample_data)-1,
round(test$statistic, digits = rounded_digits),
round(test$p.value, digits = rounded_digits),
round(abs((mean(sample_data)-mu)/sd(sample_data)), digits = rounded_digits))
return(intext_output)
}
o <- test_apa(sample_data = a1, mu = mean(a))
o
test_apa <- function(sample_data, mu){
rounded_digits = 3
test <- t.test(x = sample_data, mu = mu)
text <- sprintf("M = %s, SD = %s, t(%s) = %s, p = %s, d = %s",
round(mean(sample_data), digits = rounded_digits),
round(sd(sample_data), digits = rounded_digits),
length(sample_data)-1,
round(test$statistic, digits = rounded_digits),
round(test$p.value, digits = rounded_digits),
round(abs((mean(sample_data)-mu)/sd(sample_data)), digits = rounded_digits))
results <- list(model = test,
intext_output = text)
return(intext_output)
}
o <- test_apa(sample_data = a1, mu = mean(a))
test_apa <- function(sample_data, mu){
rounded_digits = 3
test <- t.test(x = sample_data, mu = mu)
text <- sprintf("M = %s, SD = %s, t(%s) = %s, p = %s, d = %s",
round(mean(sample_data), digits = rounded_digits),
round(sd(sample_data), digits = rounded_digits),
length(sample_data)-1,
round(test$statistic, digits = rounded_digits),
round(test$p.value, digits = rounded_digits),
round(abs((mean(sample_data)-mu)/sd(sample_data)), digits = rounded_digits))
results <- list(model = test,
intext_output = text)
return(results)
}
o <- test_apa(sample_data = a1, mu = mean(a))
o
names(o)
o$model
o$intext_output
write.table(file = "clipboard", x = o$intext_output)
o$intext_output
o$intext_output[[1]]
write.table(file = "clipboard", x = o$intext_output[1])
write.table(file = "clipboard", x = o$intext_output[[1]])
help(data)
data()
head(ToothGrowth)
head(BJsales)
head(HairEyeColor)
head(Orange)
head(UCBAdmissions)
head(mtcars)
head(islands)
head(Orange)
mean(Orange$circumference)
t <- t.test(Orange$circumference, mu = 80)
t
class(t)
intext_ttest_1 <- function(sample_data, mu){
setClass(Class = "apa_output", representation(test_model = "htest", text = "character"))
rounded_digits = 3
test <- t.test(x = sample_data, mu = mu)
text <- sprintf("M = %s, SD = %s, t(%s) = %s, p = %s, d = %s",
round(mean(sample_data), digits = rounded_digits),
round(sd(sample_data), digits = rounded_digits),
length(sample_data)=1,
round(test$statistic, digits = rounded_digits),
round(test$p.value, digits = rounded_digits),
round(abs((mean(sample_data)-mu/sd(sample_data)), digits = rounded_digits)))
return(new("apa_output", test = test, text = text))
}
intext_ttest_1 <- function(sample_data, mu){
setClass(Class = "apa_output", representation(test_model = "htest", text = "character"))
rounded_digits = 3
test <- t.test(x = sample_data, mu = mu)
text <- sprintf("M = %s, SD = %s, t(%s) = %s, p = %s, d = %s",
round(mean(sample_data), digits = rounded_digits),
round(sd(sample_data), digits = rounded_digits),
length(sample_data)=1,
round(test$statistic, digits = rounded_digits),
round(test$p.value, digits = rounded_digits),
round(abs((mean(sample_data)-mu)/sd(sample_data)), digits = rounded_digits))
return(new("apa_output", test = test, text = text))
}
intext_ttest_1 <- function(sample_data, mu){
setClass(Class = "apa_output", representation(test_model = "htest", text = "character"))
rounded_digits = 3
test <- t.test(x = sample_data, mu = mu)
text <- sprintf("M = %s, SD = %s, t(%s) = %s, p = %s, d = %s",
round(mean(sample_data), digits = rounded_digits),
round(sd(sample_data), digits = rounded_digits),
length(sample_data)-1,
round(test$statistic, digits = rounded_digits),
round(test$p.value, digits = rounded_digits),
round(abs((mean(sample_data)-mu)/sd(sample_data)), digits = rounded_digits))
return(new("apa_output", test = test, text = text))
}
tt <- intext_ttest_1(sample_data = Orange$circumference, mu = 80)
class(t)
intext_ttest_1 <- function(sample_data, mu){
setClass(Class = "apa_output", slots = c(test = "htest", text = "character"))
rounded_digits = 3
test <- t.test(x = sample_data, mu = mu)
text <- sprintf("M = %s, SD = %s, t(%s) = %s, p = %s, d = %s",
round(mean(sample_data), digits = rounded_digits),
round(sd(sample_data), digits = rounded_digits),
length(sample_data)-1,
round(test$statistic, digits = rounded_digits),
round(test$p.value, digits = rounded_digits),
round(abs((mean(sample_data)-mu)/sd(sample_data)), digits = rounded_digits))
return(new("apa_output", test = test, text = text))
}
tt <- intext_ttest_1(sample_data = Orange$circumference, mu = 80)
intext_ttest_1 <- function(sample_data, mu){
setClass(Class = "apa_output", slots = c(test = "ANY", text = "character"))
rounded_digits = 3
test <- t.test(x = sample_data, mu = mu)
text <- sprintf("M = %s, SD = %s, t(%s) = %s, p = %s, d = %s",
round(mean(sample_data), digits = rounded_digits),
round(sd(sample_data), digits = rounded_digits),
length(sample_data)-1,
round(test$statistic, digits = rounded_digits),
round(test$p.value, digits = rounded_digits),
round(abs((mean(sample_data)-mu)/sd(sample_data)), digits = rounded_digits))
return(new("apa_output", test = test, text = text))
}
tt <- intext_ttest_1(sample_data = Orange$circumference, mu = 80)
tt$test
tt
t
tt[1]
names(tt)
tt
tt["text"]
intext_ttest_1 <- function(sample_data, mu){
setClass(Class = "apa_output", contains = c(test = "ANY", text = "character"))
rounded_digits = 3
test <- t.test(x = sample_data, mu = mu)
text <- sprintf("M = %s, SD = %s, t(%s) = %s, p = %s, d = %s",
round(mean(sample_data), digits = rounded_digits),
round(sd(sample_data), digits = rounded_digits),
length(sample_data)-1,
round(test$statistic, digits = rounded_digits),
round(test$p.value, digits = rounded_digits),
round(abs((mean(sample_data)-mu)/sd(sample_data)), digits = rounded_digits))
return(new("apa_output", test = test, text = text))
}
tt <- intext_ttest_1(sample_data = Orange$circumference, mu = 80)
intext_ttest_1 <- function(sample_data, mu){
setClass(Class = "apa_output", slots = c(test = "ANY", text = "character"))
rounded_digits = 3
test <- t.test(x = sample_data, mu = mu)
text <- sprintf("M = %s, SD = %s, t(%s) = %s, p = %s, d = %s",
round(mean(sample_data), digits = rounded_digits),
round(sd(sample_data), digits = rounded_digits),
length(sample_data)-1,
round(test$statistic, digits = rounded_digits),
round(test$p.value, digits = rounded_digits),
round(abs((mean(sample_data)-mu)/sd(sample_data)), digits = rounded_digits))
return(new("apa_output", test = test, text = text))
}
tt <- intext_ttest_1(sample_data = Orange$circumference, mu = 80)
names(tt)
tt
trackCurve <- setClass("trackCurve",
slots = c(smooth = "numeric"),
contains = "track")
track <- setClass("track", slots = c(x="numeric", y="numeric"))
t1 <- track(x = 1:10, y = 1:10 + rnorm(10))
t1
names(t1)
t1$x
t1@x
tt@test
tt@text
tt@test$statistic
dir()
dir("Documents/gut3files/projects/github_projects/apa_styleR")
dir
dir()
cd("Documents/gut3files/projects/github_projects/apa_styleR")
setwd("Documents/gut3files/projects/github_projects/apa_styleR")
setwd("Documents/gut3files/projects/github_projects/apa_styleR")
getwd()
setwd("gut3files/projects/github_projects/apa_styleR")
dir()
source(file = "simple_apa_style_output_functions.R")
source(file = "simple_apa_style_output_functions.R")
head(Orange)
source(file = "simple_apa_style_output_functions.R")
example_1 <- intext_ttest_1(sample_data = Orange$circumference, mu = 80)
#open function file from source
source(file = "simple_apa_style_output_functions.R")
#calculate single sample t-test on Orange dataset comparing mean circumferences to "population mean" or 80 using the intext_ttest_1 function
example_1 <- intext_ttest_1(sample_data = Orange$circumference, mu = 80)
example_1@text
